import org.apache.tools.ant.filters.ReplaceTokens
import org.ajoberstar.grgit.*

buildscript {
    repositories {
        mavenCentral()
        jcenter()

    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.0.2.RELEASE")
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:latest.release"
        classpath 'org.ajoberstar:gradle-git:1.4.2'

    }
}

plugins {
    id 'com.github.psxpaul.execfork' version '0.1.8'
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'application'
apply plugin: 'maven-publish'
apply plugin: 'org.springframework.boot'
apply plugin: 'jacoco'
apply plugin: "findbugs"
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'org.ajoberstar.grgit'

mainClassName = 'uk.gov.ons.fwmt.job_service_v2.ApplicationConfig'
group = 'uk.gov.ons.fwmt'
description = "fwmt-job-service"

sourceCompatibility = 1.8
targetCompatibility = 1.8

version = '0.0.45-SNAPSHOT'

bootJar {
    group = 'uk.gov.ons.fwmt'
    baseName = 'fwmt-job-service-v2'
    manifest {
    }
    version = version
}

repositories {
    mavenLocal()
    mavenCentral()
    if (!project.hasProperty('omitSDCArtifactory')) {
        maven { url "http://artifactory-sdc.onsdigital.uk/artifactory/libs-snapshot-local" }
        maven { url "http://artifactory-sdc.onsdigital.uk/artifactory/libs-release-local" }
    }
    maven { url "https://oss.sonatype.org/content/repositories/libs-snapshot" }
    maven { url "http://repo.maven.apache.org/maven2" }
}

configurations {
    jaxb
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

artifactory {
    contextUrl = System.getenv('ARTIFACTORY_URL')
    publish {
        repository {
            repoKey = 'libs-snapshot-local'
            username = System.getenv('ARTIFACTORY_USERNAME')
            password = System.getenv('ARTIFACTORY_PASSWORD')
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = group
            artifactId = 'fwmt-job-service-v2'
            version = version

            from components.java
        }
    }
}

artifactoryPublish {
    publications ('maven')
}

task genJaxb {
    ext.sourcesDir = "${buildDir}/generated-sources/jaxb"
    ext.classesDir = "${buildDir}/classes/jaxb"
    ext.schema = "${projectDir}/src/main/resources/wsdl"

    outputs.dir classesDir

    doLast() {
        project.ant {
            taskdef name: "xjc", classname: "com.sun.tools.xjc.XJCTask",
                    classpath: configurations.jaxb.asPath
            mkdir(dir: sourcesDir)
            mkdir(dir: classesDir)

            xjc(destdir: sourcesDir) {
                arg(value: "-wsdl")
                produces(dir: sourcesDir, includes: "**/*.java")
                schema(dir: schema, includes: "**/*.wsdl")
            }

            javac(destdir: classesDir, source: 1.8, target: 1.8, debug: true,
                    debugLevel: "lines,vars,source",
                    classpath: configurations.jaxb.asPath) {
                src(path: sourcesDir)
                include(name: "**/*.java")
                include(name: "*.java")
            }

            copy(todir: classesDir) {
                fileset(dir: sourcesDir, erroronmissingdir: false) {
                    exclude(name: "**/*.java")
                }
            }
        }
    }
}

dependencies {
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: '1.5.13.RELEASE'
    compile group: 'uk.gov.ons.fwmt', name: 'fwmt-gateway-common', version: '0.0.15-RELEASE'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '1.5.13.RELEASE'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web-services', version: '1.5.13.RELEASE'
    compile group: 'org.springframework.retry', name: 'spring-retry', version: '1.2.2.RELEASE'
    compile group: 'org.springframework', name: 'spring-aop', version: '5.0.8.RELEASE'
    compile 'org.aspectj:aspectjweaver:1.9.1'
    compile(group: 'org.springframework.cloud', name: 'spring-cloud-spring-service-connector', version: '1.2.5.RELEASE') {
        exclude(module: 'log4j')
    }
    compile group: 'org.springframework.cloud', name: 'spring-cloud-cloudfoundry-connector', version: '1.2.5.RELEASE'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: '1.5.13.RELEASE'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-amqp', version: '1.5.13.RELEASE'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'
    compile(group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.3') {
        exclude(module: 'commons-logging')
    }
    compile group: 'org.springframework.cloud', name: 'spring-cloud-cloudfoundry-connector', version: '1.2.5.RELEASE'
    compile(group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.3') {
        exclude(module: 'commons-logging')
    }
    compile group: 'org.jsoup', name: 'jsoup', version: '1.11.3'
    compile group: 'org.json', name: 'json', version: '20180130'
    compile group: 'org.projectlombok', name: 'lombok', version: '1.16.8'
    compile group: 'org.yaml', name: 'snakeyaml', version: '1.19'
    compile group: 'org.apache.commons', name: 'commons-csv', version: '1.5'
    compile group: 'io.springfox', name: 'springfox-swagger2', version: '2.9.1'
    compile group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.9.1'
    compile(files(genJaxb.classesDir).builtBy(genJaxb))
    jaxb "com.sun.xml.bind:jaxb-xjc:2.1.7"
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.5'
    compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: '2.9.5'

    testCompile(group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '1.5.9.RELEASE') {
        exclude(module: 'android-json')
    }
    testCompile group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'
    testCompile group: 'io.cucumber', name: 'cucumber-java8', version: '3.0.2'
    testCompile group: 'io.cucumber', name: 'cucumber-junit', version: '3.0.2'
    testCompile group: 'io.cucumber', name: 'cucumber-spring', version: '3.0.2'
    testCompile group: 'org.powermock', name: 'powermock-api-mockito2', version: '1.7.0'
    testCompile group: 'org.powermock', name: 'powermock-core', version: '1.7.0'
    testCompile group: 'org.powermock', name: 'powermock-module-junit4', version: '1.7.0'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.7.1'
    testCompile "junit:junit:4.12"
    testCompile("org.springframework.boot:spring-boot-starter-test")

    integrationTestCompile 'org.assertj:assertj-core:3.0.0'

    integrationTestRuntime group: 'uk.gov.ons.fwmt', name: 'fwmt-service-mocks', version: '1.0.1-SNAPSHOT'
}

task integrationTest(type: Test) {
    jacoco {
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
}
check.dependsOn integrationTest
integrationTest.mustRunAfter test

task runMocks(type: com.github.psxpaul.task.JavaExecFork) {
    String mockJarPath = configurations.integrationTestRuntime.find { it.name.startsWith("fwmt-service-mocks") }
    classpath = sourceSets.main.runtimeClasspath
    main = '-jar'
    args = [ mockJarPath ]
    jvmArgs = [ '-Xmx500m' ]
    workingDir = "$buildDir"
    standardOutput = "$buildDir/fwmt-service-mocks.log"
    errorOutput = "$buildDir/fwmt-service-mocks-errors.log"
    stopAfter = integrationTest
    waitForPort = 9099
    waitForOutput = 'Started Application'
}
integrationTest.dependsOn runMocks

processResources {
    filter ReplaceTokens, tokens: [
            "project.artifactId": "name",
            "project.version"   : "version",
            "scm.url"           : "url",
            "buildNumber"       : "buildnumber",
            "scmBranch"         : "branch",
            "timestamp"         : "timestamp",
    ]
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/legacy_ingest/*',
                    '**/dto/*',
                    '**/data/tm/*',
                    '**/config/*',
                    '**/CSVParseFinalResult.java',
                    '**/ApplicationConfig.java',
                    '**/WebConfig.java'
            ])
        })
    }
}
test.finalizedBy(project.tasks.jacocoTestReport)

check.dependsOn jacocoTestReport

findbugs {
    ignoreFailures = false
    sourceSets = [sourceSets.main]
    reportsDir = file("$project.buildDir/reports/findbugs")
    effort = "max"
}


tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}
